#include <iostream>
#include <tr1/unordered_map>

#include <algorithm>
#include <cmath>
using namespace std;
const long long MAXN = 1e5+5;
long long pos[MAXN];
long long res[MAXN];
long long arr[MAXN];
tr1::unordered_map<long long,long long> m1;
long long pref[MAXN];
struct node{
    long long l,r,id;
    bool operator < (const node &q) const {
        return pos[l] == pos[q.l] ? r < q.r : pos[l] < pos[q.l];
    }
} q[MAXN];


int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n,k;
    cin>>n>>k;
    long long sz = sqrt(n)+100;
    for(long long i=1;i<=n;i++){
        cin>>arr[i];
        if(arr[i]!=1){
            arr[i] = -1;
        }
        pos[i] = (i-1)/(sz+1);
    }
    for(long long i=1;i<=n;i++){
        long long x;
        cin>>x;
        arr[i]*=x;
        pref[i] = pref[i-1]+arr[i];
    }
    long long m;
    cin>>m;
    for(long long i=1;i<=m;i++){
        cin>>q[i].l>>q[i].r;
        q[i].id = i;
    }
    sort(q+1,q+1+m);
    long long L=1;
    long long R=0;
    long long ans = 0;
    m1[0] = 1;
    for(long long i=1;i<=m;i++){
        while(L<q[i].l){
            m1[pref[L-1]]--;
            ans-=m1[pref[L-1]+k];
            L++;
        }
        while(L>q[i].l){
            L--;
            ans+=m1[pref[L-1]+k];
            m1[pref[L-1]]++;
        }
        while(R<q[i].r){
            R++;
            ans+=m1[pref[R]-k];
            m1[pref[R]]++;
            
        }
        while(R>q[i].r){
            m1[pref[R]]--;
            ans-=m1[pref[R]-k];
            R--;
        }
        res[q[i].id] = ans;
    }
    for(long long i=1;i<=m;i++){
        cout<<res[i]<<endl;
    }
}
