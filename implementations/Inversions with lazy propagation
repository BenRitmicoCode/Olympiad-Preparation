#include <iostream>
#include <vector>
using namespace std;
const int MAXN = 3e5;
vector<int> v1[MAXN];
int dp[MAXN];
int val[MAXN];
int lazy[4*MAXN];
int t[4*MAXN];
int pos[MAXN];
vector<int> ord;
bool visited[MAXN];

void dfs(int curr,int par){
    visited[curr] = true;
    ord.push_back(curr);
    pos[curr] = ord.size()-1;
    dp[curr] = 1;
    for(int x:v1[curr]){
        if(x!=par && !visited[x]){
            dfs(x,curr);
            dp[curr]+=dp[x];
        }
    }
}
void push(int curr,int l,int r){
    if(!lazy[curr]){
        return;
    }

    int len = r-l+1;
    t[curr] = len-t[curr];
    if(len>0){
        lazy[2*curr]^=lazy[curr];
        lazy[2*curr+1]^=lazy[curr];
    }
    lazy[curr] = 0;
}
void build(int curr,int l,int r){
    if(l==r){
        t[curr] = val[ord[l]];
        
        return;
    }
    int mid=(l+r)/2;
    build(2*curr,l,mid);
    build(2*curr+1,mid+1,r);
    t[curr] = t[2*curr] + t[2*curr+1];
    
}
int query(int curr,int l,int r,int tl,int tr){
    push(curr,l,r);
    if(l>tr || r<tl){
        return 0;
    }
    if(l>=tl && r<=tr){
        return t[curr];
    }
    int mid = (l+r)/2;
    return query(2*curr,l,mid,tl,tr)+query(2*curr+1,mid+1,r,tl,tr);
}
void update(int curr,int l,int r,int tl,int tr){
    push(curr,l,r);
    if(l>tr || r<tl){
        return;
    }
    if(l>=tl && r<=tr){
        
        lazy[curr]^=1;
        push(curr,l,r);
        return;
    }
    int mid = (l+r)/2;
    update(2*curr,l,mid,tl,tr);
    update(2*curr+1,mid+1,r,tl,tr);
    t[curr] = t[2*curr]+t[2*curr+1];
}
int main(){
    ord.push_back(-1);
    int n;
    cin>>n;
    for(int i=2;i<=n;i++){
        int x;
        cin>>x;
        v1[x].push_back(i);
        v1[i].push_back(x);
    }
    dfs(1,1);
    for(int i=1;i<=n;i++){
        
        cin>>val[i];
        
    }
    build(1,1,n);
    int q;
    cin>>q;
    while(q--){
        string s;
        cin>>s;
        if(s == "get"){
            int x;
            cin>>x;
            cout<<query(1,1,n,pos[x],pos[x]+dp[x]-1)<<endl;
        }else{
            int x;
            cin>>x;
            update(1,1,n,pos[x],pos[x]+dp[x]-1);
        }
    }
}
