#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;
const long long MAXN = 755;
long long n;
long long dx[10] = {-1,0,1,1,1,0,-1,-1};
long long dy[10] = {1,1,1,0,-1,-1,-1,0};
long long dx1[5] = {1,0,-1,0};
long long dy1[5] = {0,1,0,-1};
long long height[MAXN][MAXN];
long long holecount[MAXN*MAXN];
vector<pair<long long,pair<long long,long long>>> v1;

struct dsu{
  pair<long long,long long> pa[MAXN][MAXN];
  long long cnt[MAXN][MAXN];
  long long sz[MAXN][MAXN];
  void init(){
      for(long long i=0;i<MAXN;i++){
          for(long long j=0;j<MAXN;j++){
              pa[i][j] = make_pair(i,j);
              sz[i][j] = 1;
              cnt[i][j] = 0;
          }
      }
      
  }
  pair<long long,long long> findpar(pair<long long,long long> a){
        if(pa[a.first][a.second] == a){
            return a;
        }
        return pa[a.first][a.second] = findpar(pa[a.first][a.second]);
    }
    long long uni(pair<long long,long long> a,pair<long long,long long> b){
        a = findpar(a);
        b = findpar(b);
        if(a == b){
            return 0;
        }
        if(sz[a.first][a.second]>sz[b.first][b.second]){
            swap(a,b);
        }
        sz[b.first][b.second]+=sz[a.first][a.second];
        cnt[b.first][b.second]+=cnt[a.first][a.second];
        pa[a.first][a.second] = b;
        return 1;
    }
} dsu;
bool check(long long x,long long y){
    return x>0 && x<=n && y>0 && y<=n;
}

bool check2(long long x,long long y){
    return x>=0 && x<=n+1 && y>=0 && y<=n+1;
}
int main(){
    ifstream fin("valleys.in");
    ofstream fout("valleys.out");
    cin>>n;
    for(long long i=0;i<=n+1;i++){
        for(long long j=0;j<=n+1;j++){
            height[i][j] = 1e9;
        }
    }
    for(long long i=1;i<=n;i++){
        for(long long j=1;j<=n;j++){
            long long h;
            cin>>h;
            height[i][j] = h;
            v1.push_back(make_pair(h,make_pair(i,j)));
        }
    }

    //init dsu
    sort(v1.begin(),v1.end());
    dsu.init();
    for(long long i=0;i<=n;i++){
        dsu.uni(make_pair(0,i),make_pair(0,i+1));
        
        dsu.uni(make_pair(n+1,i),make_pair(n+1,i+1));
        
        dsu.uni(make_pair(i,0),make_pair(i+1,0));
        
        dsu.uni(make_pair(i,n+1),make_pair(i+1,n+1));
    }
    for(long long i=(n*n)-1;i>=0;i--){
        holecount[i] = holecount[i+1]+1;
        
        for(long long j=0;j<8;j++){
            long long x = v1[i].second.first;
            long long y = v1[i].second.second;
            long long x2 = x+dx[j];
            long long y2 = y+dy[j];
            if(check2(x2,y2) && height[x][y]<height[x2][y2]){
             //  fout<<x<<" "<<y<<" "<<x2<<" "<<y2<<endl;
                holecount[i]-=dsu.uni(make_pair(x,y),make_pair(x2,y2));
            }
        }
        cout<<i<<" "<<holecount[i]<<endl;
    }
    long long ans = 0;
    dsu.init();
    for(long long i=0;i<(n*n);i++){
        long long del = holecount[i+1]-holecount[i];
        long long x = v1[i].second.first;
        long long y= v1[i].second.second;
        for(long long j=0;j<4;j++){
            long long x2 = x+dx1[j];
            long long y2 = y+dy1[j];
            if(check(x2,y2) && height[x2][y2]<height[x][y]){
                dsu.uni(make_pair(x,y),make_pair(x2,y2));
            }
            
        }
        //fout<<dsu.cnt[dsu.findpar(make_pair(x,y)).first][dsu.findpar(make_pair(x,y)).second]<<endl;
        dsu.cnt[dsu.findpar(make_pair(x,y)).first][dsu.findpar(make_pair(x,y)).second]+=del;
        
        if(dsu.cnt[dsu.findpar(make_pair(x,y)).first][dsu.findpar(make_pair(x,y)).second] == 0){
            ans+=dsu.sz[dsu.findpar(make_pair(x,y)).first][dsu.findpar(make_pair(x,y)).second];
        }
    }
    fout<<ans<<endl;
}
