#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
using namespace std;
//fails 1 testcase
int n,g;
const int MAXN = 100100;
multiset<pair<int,int>> s1;
map<int,int> m1;
vector<pair<int,pair<int,int>>> v1;
int main() {
    ifstream fin("measurement.in");
    ofstream fout("measurement.out");
    cin>>n>>g;
    

    for(int i=0;i<n;i++){
        int a,b,c;
        cin>>a>>b>>c;
        v1.push_back(make_pair(a,make_pair(b,c)));
        
    }
    sort(v1.begin(),v1.end());
    for(int i=0;i<n;i++){
        int a = v1[i].first;
        int b = v1[i].second.first;
        int c = v1[i].second.second;
       // fout<<a<<" "<<b<<" "<<c<<endl;
        
    }
    int holdmax = 0;
    int changes = 0;
    int curr = -1;
    for(int i=0;i<n;i++){
        int b = v1[i].second.first;
        int c = v1[i].second.second;
        if(m1[b] ==0){
            
            m1[b] = g;
        }
        bool ok = true;
        auto it = s1.find(make_pair(m1[b],b));
        auto it2 = s1.lower_bound(make_pair(m1[b]+c,0));
        if(it2!=s1.end()){
            if(it2->first == m1[b]+c){
                ok = false;
            }
        }
        if(it!=s1.end()){
           // cout<<123<<endl;
            s1.erase(it);
        }
        
        m1[b]=m1[b]+c;
        cout<<m1[b]<<" "<<holdmax<<endl;
        
        s1.insert(make_pair(m1[b],b));
        auto its = s1.end();
        its--;
      //  fout<<its->first<<endl;
        if(m1[b] == its->first && curr!=b){
            changes++;
            //cout<<1<<endl;
            holdmax = m1[b];
            curr = b;
        }
        else if(its->second == b && curr == b && ok){
                        holdmax = its->first;
                      //  cout<<2<<endl;
            continue;
        }
        else if(curr == b && m1[b] != its->first){
            changes++;
           // cout<<3<<endl;
            holdmax = its->first;
            curr = its->second;
        }
       
    }
    cout<<changes<<endl;
}
