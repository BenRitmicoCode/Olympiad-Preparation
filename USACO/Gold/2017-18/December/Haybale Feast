#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
const long long MAXN = 100100;
long long n,m;
vector<pair<long long,long long>> v1;
long long preflavour[MAXN];
long long tree[MAXN*4+10];
void build(long long node,long long start,long long end){
    if(start == end){
        tree[node] = v1[start].second;
    }else{
        long long mid = (start+end)/2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tree[node] = max(tree[2*node],tree[2*node+1]);
    }
    
}
long long query(long long node,long long start,long long end,long long l,long long r){
    if(r<start ||end<l){
        return -1;
        
    }else{
        //std::fout<<start<<" "<<end<<endl;
        if(l<=start && end<=r){
            return tree[node];
        }
        long long mid = (start+end)/2;
        long long p1 = query(2*node,start,mid,l,r);
        long long p2 = query(2*node+1,mid+1,end,l,r);
       
        return max(p1,p2);
    }
}
long long binsearch(long long ind){
    long long l = ind;
    long long r = n;
    long long ans = n+10;
    while(l<=r){
        long long mid = (l+r)/2;
        long long store = preflavour[mid]-preflavour[ind-1];
      //  fout<<"store: "<<store<<endl;
        if(store>=m){
            r = mid-1;
            ans = mid;
        }else{
            l = mid+1;
        }
    }
    if(ans == n+10){
        ans = -1;
    }
    return ans;
}
int main() {
    ifstream fin("hayfeast.in");
    ofstream fout("hayfeast.out");
	fin>>n>>m;
	v1.push_back(make_pair(0,0));
	for(long long i=1;i<=n;i++){
	    long long x,y;
	    fin>>x>>y;
	    v1.push_back(make_pair(x,y));
	}
	preflavour[0] = 0;
	for(long long i=1;i<=n;i++){
	    preflavour[i] = preflavour[i-1]+v1[i].first;
	}
	build(1,1,n);
	long long ans = 1000000000000;
	for(long long i=1;i<=n;i++){
	    long long holdind = binsearch(i);
	   // fout<<holdind<<" "<<endl;
	    if(holdind == -1){
	        continue;
	    }
	    long long possible = query(1,1,n,i,holdind);
	    ans = min(possible,ans);
	}
	fout<<ans<<endl;
}
